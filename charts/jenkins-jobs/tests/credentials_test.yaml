suite: credentials tests
templates:
  - jcasc-jobs-config.yaml
tests:
  - it: should generate a folder with the associated (folder-level) credentials
    values:
      - fixtures/credentials_default.yaml
    asserts:
      - equal:
          path: data["jobs-definition.yaml"]
          value: |-
            jobs:
              - script: >

                  folder('folder-a') {
                    displayName('Folder A')
                    description('Folder A')

                    properties {
                      folderCredentialsProperty {
                        domainCredentials {
                          domainCredentials {
                            domain {
                              name('Folder A')
                              description('Credentials for the job Folder A')
                            }
                            credentials {
                              awsCredentialsImpl {
                                scope('GLOBAL')
                                id('aws-ec2-billing-account')
                                description('aws-ec2-billing-account')
                                accessKey('${BILLING_AWS_ACCESS_KEY_ID}')
                                secretKey('${BILLING_AWS_SECRET_ACCESS_KEY}')
                                iamRoleArn('foo::bar')
                                iamMfaSerialNumber('1.23456789e+08')
                                iamExternalId('billing-001')
                                stsTokenDuration('300')
                              }
                              awsCredentialsImpl {
                                scope('GLOBAL')
                                id('aws-ec2-technical-account')
                                description('aws-ec2-technical-account')
                                accessKey('${AWS_ACCESS_KEY_ID}')
                                secretKey('${AWS_SECRET_ACCESS_KEY}')
                                iamRoleArn('')
                                iamMfaSerialNumber('')
                                iamExternalId('')
                              }
                              usernamePassword {
                                scope('GLOBAL')
                                id('dockerhub-user')
                                description('Username and password for the Docker Hub')
                                username('user')
                                password('${DOCKER_HUB_TOKEN_PUSH}')
                                usernameSecret(false)
                              }
                              usernamePassword {
                                scope('GLOBAL')
                                id('internalSensitiveBackoffice')
                                description('internalSensitiveBackoffice')
                                username('${ARTIFACTORY_API_INFRA_REPORTS_USERNAME}')
                                password('${ARTIFACTORY_API_INFRA_REPORTS_PASSWORD}')
                                usernameSecret(true)
                              }
                            }
                          }
                        }
                      }
                    }
                    configure { node ->
                      def configNode = node / 'properties' /  'com.cloudbees.hudson.plugins.folder.properties.FolderCredentialsProvider_-FolderCredentialsProperty' /  'domainCredentialsMap' / 'entry' / 'java.util.concurrent.CopyOnWriteArrayList'

                      configNode << 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl'(plugin: 'plain-credentials') {
                        scope('GLOBAL')
                        id('api-token')
                        description('API token for the cloud')
                        secret(hudson.util.Secret.fromString('${DOCKER_HUB_TOKEN_PUSH}').getEncryptedValue())
                      }
                      configNode << 'org.jenkinsci.plugins.github__branch__source.GitHubAppCredentials'(plugin: 'github-branch-source') {
                        scope('GLOBAL')
                        id('bot-github-app')
                        description('bot-github-app')
                        appID('${GITHUB_APP_BOT_APPID}')
                        privateKey('''${GITHUB_APP_BOT_KEY}''')
                      }
                      configNode << 'org.jenkinsci.plugins.github__branch__source.GitHubAppCredentials'(plugin: 'github-branch-source') {
                        scope('GLOBAL')
                        id('external-github-app')
                        description('Github App installed on the external GitHub organization 'lemmings'')
                        appID('123456')
                        privateKey('''${GITHUB_APP_LEMMINGS}''')
                        owner('lemmings')
                      }

                      configNode << 'org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl' {
                        scope('GLOBAL')
                        id('kubeconfig-cluster-1')
                        description('Kubeconfig file for cluster-1')
                        fileName('kubeconfig')
                        secretBytes(com.cloudbees.plugins.credentials.SecretBytes.fromBytes(new String('${base64:${KUBECONFIG_CLUSTER-1}}').decodeBase64()).toString())
                      }
                      configNode << 'com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey' {
                        scope('GLOBAL')
                        id('ssh-deploy-key')
                        description('SSH privkey used to access jenkins-infra/charts-secrets')
                        username('${SSH_CHARTS_SECRETS_USERNAME}')
                        usernameSecret(false)
                        privateKeySource(class:"com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey\$DirectEntryPrivateKeySource") {
                          privateKey('''${SSH_CHARTS_SECRETS_PRIVKEY}''')

                        }
                      }

                      configNode << 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl'(plugin: 'plain-credentials') {
                        scope('GLOBAL')
                        id('super-secret-str-with-no-description')
                        description('super-secret-str-with-no-description')
                        secret(hudson.util.Secret.fromString('SuperSecretPassword').getEncryptedValue())
                      }

                      configNode << 'com.microsoft.azure.util.AzureCredentials'(plugin: 'azure-credentials') {
                        scope('GLOBAL')
                        id('user-azure-serviceprincipal')
                        description('Azure Service Principal credential')
                        data {
                          subscriptionId(hudson.util.Secret.fromString('${AZURE_SUBSCRIPTION_ID}').getEncryptedValue())
                          clientId(hudson.util.Secret.fromString('${AZURE_CLIENT_ID}').getEncryptedValue())
                          clientSecret(hudson.util.Secret.fromString('${AZURE_CLIENT_SECRET_VALUE}').getEncryptedValue())
                          tenant(hudson.util.Secret.fromString('${AZURE_TENANT_ID}').getEncryptedValue())
                          azureEnvironmentName('Azure')
                        }
                      }
                    }
                  }
  - it: should use the specified (folder-level) GitHub credential for all children unless overriden
    values:
      - fixtures/credentials_override.yaml
    asserts:
      - equal:
          path: data["jobs-definition.yaml"]
          value: |-
            jobs:
              - script: >

                  folder('folder-a') {
                    displayName('Folder A')
                    description('Folder A')

                    properties {
                      folderCredentialsProperty {
                        domainCredentials {
                          domainCredentials {
                            domain {
                              name('Folder A')
                              description('Credentials for the job Folder A')
                            }
                          }
                        }
                      }
                    }
                    configure { node ->
                      def configNode = node / 'properties' /  'com.cloudbees.hudson.plugins.folder.properties.FolderCredentialsProvider_-FolderCredentialsProperty' /  'domainCredentialsMap' / 'entry' / 'java.util.concurrent.CopyOnWriteArrayList'
                      configNode << 'org.jenkinsci.plugins.github__branch__source.GitHubAppCredentials'(plugin: 'github-branch-source') {
                        scope('GLOBAL')
                        id('folder-a-github-app')
                        description('folder-a-github-app')
                        appID('${GITHUB_APP_FOLDERA_APPID}')
                        privateKey('''${GITHUB_APP_FOLDERA_KEY}''')
                      }
                    }
                  }
                  multibranchPipelineJob('folder-a/child-job-1') {
                    triggers {
                      periodicFolderTrigger {
                        interval('2h')
                      }
                    }

                    branchSources {
                      branchSource {
                        source {
                          github {
                            id('folder-a/child-job-1')
                            credentialsId('folder-a-github-app')
                            configuredByUrl(true)
                            repositoryUrl('https://github.com/jenkins-infra/child-job-1')
                            repoOwner('jenkins-infra')
                            repository('child-job-1')
                            traits {
                              gitHubNotificationContextTrait {
                                contextLabel('jenkins/localhost/folder-a/child-job-1')
                                typeSuffix(true)
                              }
                              gitHubSCMSourceStatusChecksTrait {
                                // Note: changing this name might have impact on github branch protections if they specify status names
                                name('jenkins')
                                skip(true)
                                // If this option is checked, the notifications sent by the GitHub Branch Source Plugin will be disabled.
                                skipNotifications(false)
                                skipProgressUpdates(false)
                                // Default value: false. Warning: risk of secret leak in console if the build fails
                                // Please note that it only disable the detailed logs. If you really want no logs, then use "skip(false)' instead
                                suppressLogs(true)
                                unstableBuildNeutral(false)
                              }
                              gitHubBranchDiscovery {
                                strategyId(1) // 1-only branches that are not pull requests
                              }
                              gitHubPullRequestDiscovery {
                                strategyId(1) // 1-Merging the pull request with the current target branch revision
                              }
                              gitHubForkDiscovery {
                                strategyId(1) // 1-Merging the pull request with the current target branch revision
                                trust {
                                  gitHubTrustPermissions()
                                }
                              }
                              pruneStaleBranchTrait()
                              gitHubTagDiscovery()
                              pullRequestLabelsBlackListFilterTrait {
                                labels('on-hold,ci-skip,skip-ci')
                              }
                              // Select branches and tags to build based on these filters
                              headWildcardFilterWithPR {
                                includes('main master PR-*') // only branches listed here
                                excludes('')
                                tagIncludes('*')
                                tagExcludes('')
                              }
                            }
                          }
                          buildStrategies {
                            buildAnyBranches {
                              strategies {
                                skipInitialBuildOnFirstBranchIndexing()
                                buildChangeRequests {
                                  ignoreTargetOnlyChanges(true)
                                  ignoreUntrustedChanges(true)
                                }
                                buildRegularBranches()
                                buildTags {
                                  atLeastDays('-1')
                                  atMostDays('3')
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    factory {
                      workflowBranchProjectFactory {
                        scriptPath('Jenkinsfile_k8s')
                      }
                    }
                    orphanedItemStrategy {
                      defaultOrphanedItemStrategy {
                        pruneDeadBranches(true)
                        daysToKeepStr("")
                        numToKeepStr("")
                        abortBuilds(true)
                      }
                    }
                    displayName('Child Multibranch Job 1')
                    description('Child Multibranch Job 1')
                  }
                  multibranchPipelineJob('folder-a/child-job-2') {
                    triggers {
                      periodicFolderTrigger {
                        interval('2h')
                      }
                    }

                    branchSources {
                      branchSource {
                        source {
                          github {
                            id('folder-a/child-job-2')
                            credentialsId('folder-a-github-app')
                            configuredByUrl(true)
                            repositoryUrl('https://github.com/jenkins-infra/child-job-2')
                            repoOwner('jenkins-infra')
                            repository('child-job-2')
                            traits {
                              gitHubNotificationContextTrait {
                                contextLabel('jenkins/localhost/folder-a/child-job-2')
                                typeSuffix(true)
                              }
                              gitHubSCMSourceStatusChecksTrait {
                                // Note: changing this name might have impact on github branch protections if they specify status names
                                name('jenkins')
                                skip(true)
                                // If this option is checked, the notifications sent by the GitHub Branch Source Plugin will be disabled.
                                skipNotifications(false)
                                skipProgressUpdates(false)
                                // Default value: false. Warning: risk of secret leak in console if the build fails
                                // Please note that it only disable the detailed logs. If you really want no logs, then use "skip(false)' instead
                                suppressLogs(true)
                                unstableBuildNeutral(false)
                              }
                              gitHubBranchDiscovery {
                                strategyId(1) // 1-only branches that are not pull requests
                              }
                              gitHubPullRequestDiscovery {
                                strategyId(1) // 1-Merging the pull request with the current target branch revision
                              }
                              gitHubForkDiscovery {
                                strategyId(1) // 1-Merging the pull request with the current target branch revision
                                trust {
                                  gitHubTrustPermissions()
                                }
                              }
                              pruneStaleBranchTrait()
                              gitHubTagDiscovery()
                              pullRequestLabelsBlackListFilterTrait {
                                labels('on-hold,ci-skip,skip-ci')
                              }
                              // Select branches and tags to build based on these filters
                              headWildcardFilterWithPR {
                                includes('main master PR-*') // only branches listed here
                                excludes('')
                                tagIncludes('*')
                                tagExcludes('')
                              }
                            }
                          }
                          buildStrategies {
                            buildAnyBranches {
                              strategies {
                                skipInitialBuildOnFirstBranchIndexing()
                                buildChangeRequests {
                                  ignoreTargetOnlyChanges(true)
                                  ignoreUntrustedChanges(true)
                                }
                                buildRegularBranches()
                                buildTags {
                                  atLeastDays('-1')
                                  atMostDays('3')
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    factory {
                      workflowBranchProjectFactory {
                        scriptPath('Jenkinsfile_k8s')
                      }
                    }
                    orphanedItemStrategy {
                      defaultOrphanedItemStrategy {
                        pruneDeadBranches(true)
                        daysToKeepStr("")
                        numToKeepStr("")
                        abortBuilds(true)
                      }
                    }
                    displayName('Child Multibranch Job 2')
                    description('Child Multibranch Job 2')
                  }
                  multibranchPipelineJob('folder-a/child-job-3') {
                    triggers {
                      periodicFolderTrigger {
                        interval('2h')
                      }
                    }

                    branchSources {
                      branchSource {
                        source {
                          github {
                            id('folder-a/child-job-3')
                            credentialsId('another-gh-app')
                            configuredByUrl(true)
                            repositoryUrl('https://github.com/jenkins-infra/child-job-3')
                            repoOwner('jenkins-infra')
                            repository('child-job-3')
                            traits {
                              gitHubNotificationContextTrait {
                                contextLabel('jenkins/localhost/folder-a/child-job-3')
                                typeSuffix(true)
                              }
                              gitHubSCMSourceStatusChecksTrait {
                                // Note: changing this name might have impact on github branch protections if they specify status names
                                name('jenkins')
                                skip(true)
                                // If this option is checked, the notifications sent by the GitHub Branch Source Plugin will be disabled.
                                skipNotifications(false)
                                skipProgressUpdates(false)
                                // Default value: false. Warning: risk of secret leak in console if the build fails
                                // Please note that it only disable the detailed logs. If you really want no logs, then use "skip(false)' instead
                                suppressLogs(true)
                                unstableBuildNeutral(false)
                              }
                              gitHubBranchDiscovery {
                                strategyId(1) // 1-only branches that are not pull requests
                              }
                              gitHubPullRequestDiscovery {
                                strategyId(1) // 1-Merging the pull request with the current target branch revision
                              }
                              gitHubForkDiscovery {
                                strategyId(1) // 1-Merging the pull request with the current target branch revision
                                trust {
                                  gitHubTrustPermissions()
                                }
                              }
                              pruneStaleBranchTrait()
                              gitHubTagDiscovery()
                              pullRequestLabelsBlackListFilterTrait {
                                labels('on-hold,ci-skip,skip-ci')
                              }
                              // Select branches and tags to build based on these filters
                              headWildcardFilterWithPR {
                                includes('main master PR-*') // only branches listed here
                                excludes('')
                                tagIncludes('*')
                                tagExcludes('')
                              }
                            }
                          }
                          buildStrategies {
                            buildAnyBranches {
                              strategies {
                                skipInitialBuildOnFirstBranchIndexing()
                                buildChangeRequests {
                                  ignoreTargetOnlyChanges(true)
                                  ignoreUntrustedChanges(true)
                                }
                                buildRegularBranches()
                                buildTags {
                                  atLeastDays('-1')
                                  atMostDays('3')
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    factory {
                      workflowBranchProjectFactory {
                        scriptPath('Jenkinsfile_k8s')
                      }
                    }
                    orphanedItemStrategy {
                      defaultOrphanedItemStrategy {
                        pruneDeadBranches(true)
                        daysToKeepStr("")
                        numToKeepStr("")
                        abortBuilds(true)
                      }
                    }
                    displayName('Child Multibranch Job 3')
                    description('Child Multibranch Job 3')
                  }
