apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "rsyncd.fullname" . }}
  labels:
{{ include "rsyncd.labels" . | indent 4 }}
spec:
  # Rsyncd does not scale horizontally - https://man7.org/linux/man-pages/man5/rsyncd.conf.5.html
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "rsyncd.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "rsyncd.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      automountServiceAccountToken: false
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: rsyncd
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: RSYNCD_DAEMON
              value: "{{ .Values.configuration.rsyncd_daemon }}"
            - name: {{ upper .Values.configuration.rsyncd_daemon }}_PORT
              value: "{{ include "rsyncd.port" . }}"
          {{- if and .Values.configuration.sshd .Values.configuration.sshd.public_key }}
            - name: SSHD_PUBLIC_KEY
              value: "{{ .Values.configuration.sshd.public_key }}"
          {{- end }}
          {{- if and .Values.configuration.sshd .Values.configuration.sshd.log_level }}
            - name: SSHD_LOG_LEVEL
              value: "{{ .Values.configuration.sshd.log_level }}"
          {{- end }}
          ports:
            - name: {{ .Values.configuration.rsyncd_daemon }}
              containerPort: {{ include "rsyncd.port" . }}
              protocol: TCP
          livenessProbe:
            # Using a tcpSocket pollutes SSHD logs. Instead, we check
            # for existence of sshd process as it is the last instruction
            # of the entrypoint.
            exec:
              command:
              - pgrep
          {{- if eq .Values.configuration.rsyncd_daemon "sshd" }}
              - sshd
            initialDelaySeconds: 10
            failureThreshold: 15
          {{- else if eq .Values.configuration.rsyncd_daemon "rsyncd" }}
              - rsync
            initialDelaySeconds: 5
          {{- end }}
            periodSeconds: 5
          readinessProbe:
            # Using a tcpSocket pollutes SSHD logs. Instead, we check
            # for existence of pid file which means SSH is ready to receive connections
            exec:
              command:
              - sh
              - -c
              - test -f /home/rsyncd/run/{{ .Values.configuration.rsyncd_daemon }}.pid
            {{- if eq .Values.configuration.rsyncd_daemon "sshd" }}
            initialDelaySeconds: 10
            failureThreshold: 15
            {{- else if eq .Values.configuration.rsyncd_daemon "rsyncd" }}
            initialDelaySeconds: 5
            {{- end }}
            periodSeconds: 5
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: ramfs
              mountPath: /tmp
              subPath: tmp
            - name: ramfs
              mountPath: /home/rsyncd/run
              subPath: run
          {{- if eq .Values.configuration.rsyncd_daemon "rsyncd" }}
            - name: rsyncd-conf
              mountPath: /home/rsyncd/etc/rsyncd.d/rsyncd.inc
              readOnly: true # Default for configmaps
              subPath: rsyncd.inc
            {{- range .Values.configuration.components }}
            - name: rsyncd-conf
              mountPath: /home/rsyncd/etc/rsyncd.d/{{ .name }}.conf
              readOnly: true # Default for configmaps
              subPath: {{ .name }}.conf
            {{- end }}
          {{- end }}
          {{- range .Values.configuration.components }}
            - name: datadir-{{ .name }}
              mountPath: {{ .path }}
              readOnly: {{ eq (toString .writeEnabled) "true" | ternary "false" "true" }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: ramfs
          emptyDir:
            medium: Memory
            sizeLimit: 32Mi
    {{- if eq .Values.configuration.rsyncd_daemon "rsyncd" }}
        - name: rsyncd-conf
          configMap:
            name: {{ include "rsyncd.fullname" . }}-conf
    {{- end }}
    {{- range .Values.configuration.components }}
        - name: datadir-{{ .name }}
      {{- include "rsyncd.datadir-volumedefinition" (dict "currentRsyncComponent" . "rootContext" $) | nindent 10 }}
    {{- end }}
